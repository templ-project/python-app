## v0.4
#
# Detect OS
#
OSFLAG :=
OSARCH :=
OSID :=
ifeq ($(OS),Windows_NT)
	OSFLAG = WIN32
	ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
		OSARCH = AMD64
	endif
	ifeq ($(PROCESSOR_ARCHITECTURE),x86)
		OSARCH = IA32
	endif
else
	UNAME_S := $(shell uname -s)
	ifeq ($(UNAME_S),Linux)
		OSFLAG = LINUX
		OSID = $(shell cat /etc/*-release | egrep "^ID=" | cut -f2 -d=)
	endif
	ifeq ($(UNAME_S),Darwin)
		OSFLAG = OSX
	endif
	UNAME_P := $(shell uname -p)
	ifeq ($(UNAME_P),x86_64)
		OSARCH = AMD64
	endif
	ifneq ($(filter %86,$(UNAME_P)),)
		OSARCH = IA32
	endif
	ifneq ($(filter arm%,$(UNAME_P)),)
		OSARCH = ARM
	endif
endif

#
# Detect Shell
#
SHELL_IS :=
ifeq ($(SHELL),/bin/bash)
	SHELL_IS = bash
else ifeq ($(SHELL),/usr/bin/bash)
	SHELL_IS = bash
else ifeq ($(SHELL),/bin/sh)
	SHELL_IS = bash
else
	SHELL_IS = powershell
endif

#
# Help Directive
#
.PHONY: help
help:
ifeq ($(SHELL_IS),powershell)
	@$(POWERSHELL) -Command "Write-Output 'You are using $(OSFLAG) OS with $(OSARCH) Architecture and $(SHELL_IS) shell.'; Write-Output '';"
	@$(POWERSHELL) -Command "'$(MAKEFILE_LIST)'.Split() | ForEach { if ($$_) { Select-String -Path $$_ -Pattern '^[a-zA-Z_-]+:.*?## .*$$' | Foreach-Object { $$tag = $$_.Matches[0].Value.split(':')[0]; $$explain = $$_.Matches[0].Value.split('#')[2]; Write-Host $$tag.PadRight(30, ' ') -ForegroundColor Cyan -NoNewline; Write-Host $$explain; } } }"
else
	@echo "You are using $(OSFLAG) OS with $(OSARCH) Architecture and $(SHELL_IS) shell."
	@echo
	@for f in $(MAKEFILE_LIST); do  grep -E '^[a-zA-Z_-]+:.*?## .*$$' $$f | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'; done
endif
.DEFAULT_GOAL := help

#
# Binaries
#

POWERSHELL=powershell -ExecutionPolicy ByPass

#
# ENV
#

NOT_IMPLEMENTED_LINUX = "Not implemented under Linux"
NOT_IMPLEMENTED_OSX = "Not implemented under OSX"
NOT_IMPLEMENTED_WINDOWS = "Not implemented under Windows"

#
# Actual Action Definitions
#

req_root: req_root-$(OSFLAG)

req_root-LINUX:
	echo $(NOT_IMPLEMENTED_LINUX)

req_root-OSX:
	echo $(NOT_IMPLEMENTED_LINUX)

req_root-WIN32:
	@$(POWERSHELL) -Command '\
	$$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent()); \
	if (!$$currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) \
	{ \
		$$message = "The following actions will require running in a powershell console with elevated rights."; \
		throw [System.Exception] $$message; \
	}'

req_root_not: req_root_not-$(OSFLAG)

req_root_not-LINUX:
	echo $(NOT_IMPLEMENTED_LINUX)

req_root_not-OSX:
	echo $(NOT_IMPLEMENTED_LINUX)

req_root_not-WIN32:
	@$(POWERSHELL) -Command '\
	$$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent());\
	if ($$currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) \
	{ \
		$$message = "The following actions do not require running in a powershell console with elevated rights."; \
		throw [System.Exception] $$message; \
	}'
